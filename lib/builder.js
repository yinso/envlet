// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, Property, Type,
    slice = [].slice;

  Type = require('typelet');

  Property = require('./property');

  Builder = (function() {
    function Builder(name, options) {
      var key, opt;
      if (options == null) {
        options = {};
      }
      if (!(this instanceof Builder)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Builder, arguments, function(){});
      }
      this.appName = name;
      this.keys = {};
      this.defs = [];
      for (key in options) {
        opt = options[key];
        this.set(key, opt);
      }
      return;
    }

    Builder.prototype.set = function(key, options) {
      var normalKey, prop, type, wrappedKey;
      if (options == null) {
        options = {};
      }
      wrappedKey = Property.wrappedName(key, this.appName);
      normalKey = Property.normalName(key, this.appName);
      if (this.defs.hasOwnProperty(wrappedKey) || this.defs.hasOwnProperty(normalKey)) {
        throw new Error("envlet.set:duplicate_key: " + key);
      }
      if (!options.hasOwnProperty('type')) {
        throw new Error("envlet.set:type_must_be_defined: " + key);
      }
      type = Type.parse(options.type);
      prop = options.hasOwnProperty('default') ? Property(wrappedKey, type, options["default"]) : Property(wrappedKey, type);
      this.keys[wrappedKey] = prop;
      this.defs.push(prop);
      this._aliasOne(prop, normalKey);
      return this;
    };

    Builder.prototype.int = function(key, defaultVal) {
      var prop;
      if (!this.keys.hasOwnProperty(key)) {
        if (arguments.length > 1) {
          this.set(key, {
            type: 'int',
            "default": defaultVal
          });
        } else {
          this.set(key, {
            type: 'int'
          });
        }
      }
      prop = this.keys[key];
      if (prop.type !== Type.Integer) {
        throw new Error("envlet.property_type_redefined: from " + prop.type + " to int");
      }
      return prop.parse();
    };

    Builder.prototype._aliasOne = function(prop, keyTo) {
      prop.addAlias(keyTo);
      this.keys[keyTo] = prop;
      return this;
    };

    Builder.prototype.alias = function(keyFrom, keyTo) {
      var normalKeyTo, prop, wrappedKeyTo;
      wrappedKeyTo = Property.wrappedName(keyTo, this.appName);
      normalKeyTo = Property.normalName(keyTo, this.appName);
      if (this.keys.hasOwnProperty(wrappedKeyTo) || this.keys.hasOwnProperty(normalKeyTo)) {
        throw new Error("envlet.alias:duplicate_key: " + keyTo);
      }
      if (!this.keys.hasOwnProperty(keyFrom)) {
        throw new Error("envlet.alias:unknown_key: " + keyFrom);
      }
      prop = this.keys[keyFrom];
      this._aliasOne(prop, wrappedKeyTo);
      this._aliasOne(prop, normalKeyTo);
      return this;
    };

    Builder.prototype.parse = function() {
      var alias, e, error, i, j, len, len1, prop, ref, ref1, val;
      this.argv = {};
      try {
        ref = this.defs;
        for (i = 0, len = ref.length; i < len; i++) {
          prop = ref[i];
          val = prop.parse();
          this.argv[prop.key] = val;
          ref1 = prop.aliases;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            alias = ref1[j];
            this.argv[alias] = val;
          }
        }
        return this;
      } catch (error) {
        e = error;
        if (process.env.ON_ERROR_HALT !== 'false') {
          this.usage();
          return process.exit();
        } else {
          throw e;
        }
      }
    };

    Builder.prototype.usage = function() {
      var i, len, prop, ref;
      console.log("Usage: ");
      ref = this.defs;
      for (i = 0, len = ref.length; i < len; i++) {
        prop = ref[i];
        console.log("  " + prop.key + ": " + prop.type, (prop.defaultVal ? "(default: " + prop.defaultVal + ")" : ""));
      }
    };

    Builder.prototype.get = function(key) {
      if (this.keys.hasOwnProperty(key)) {
        return this.keys[key].parse();
      } else {
        return process.env[key];
      }
    };

    Builder.prototype._get = function(key, type, defaultVal) {
      var prop;
      if (!this.keys.hasOwnProperty(key)) {
        if (arguments.length > 1) {
          this.set(key, {
            type: type,
            "default": defaultVal
          });
        } else {
          this.set(key, {
            type: type
          });
        }
      }
      prop = this.keys[key];
      if (prop.type !== type) {
        throw new Error("envlet.property_type_redefined: from " + prop.type + " to " + type);
      }
      return prop.parse();
    };

    Builder.prototype.int = function(key, defaultVal) {
      return this._get.apply(this, [Type.Integer].concat(slice.call(arguments)));
    };

    Builder.prototype.float = function(key, defaultVal) {
      return this._get.apply(this, [Type.Float].concat(slice.call(arguments)));
    };

    Builder.prototype.string = function(key, defaultVal) {
      return this._get.apply(this, [Type.String].concat(slice.call(arguments)));
    };

    Builder.prototype.bool = function(key, defaultVal) {
      return this._get.apply(this, [Type.Boolean].concat(slice.call(arguments)));
    };

    Builder.prototype.date = function(key, defaultVal) {
      return this._get.apply(this, [Type.Date].concat(slice.call(arguments)));
    };

    Builder.prototype.array = function(key, type, defaultVal) {
      type = typeof type === 'string' ? Type.parse(type) : type;
      return this._get.apply(this, [Type.ArrayType(type)].concat(slice.call(arguments)));
    };

    return Builder;

  })();

  module.exports = Builder;

}).call(this);
