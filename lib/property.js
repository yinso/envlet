// Generated by CoffeeScript 1.10.0
(function() {
  var EnvironmentProperty, Type;

  Type = require('typelet');

  EnvironmentProperty = (function() {
    function EnvironmentProperty(key, type, defaultVal) {
      if (!(this instanceof EnvironmentProperty)) {
        if (arguments.length === 2) {
          return new EnvironmentProperty(key, type);
        } else {
          return new EnvironmentProperty(key, type, defaultVal);
        }
      }
      this.key = key;
      this.type = type instanceof Type ? type : Type.parse(type);
      if (arguments.length > 2) {
        if (!this.type.isa(defaultVal)) {
          throw new Error("Environment: " + key + ": wrong default val type: " + defaultVal + " not a " + this.type);
        }
        this.defaultVal = defaultVal;
      }
      this.aliases = [];
    }

    EnvironmentProperty.prototype.addAlias = function(alias) {
      return this.aliases.push(alias);
    };

    EnvironmentProperty.prototype.convert = function(key) {
      return this.type.convert(process.env[key]);
    };

    EnvironmentProperty.prototype.parse = function() {
      var alias, e, error, error1, i, len, ref;
      try {
        return this.convert(this.key);
      } catch (error) {
        e = error;
        ref = this.aliases;
        for (i = 0, len = ref.length; i < len; i++) {
          alias = ref[i];
          try {
            return this.convert(alias);
          } catch (error1) {
            e = error1;
            continue;
          }
        }
        if (this.hasOwnProperty('defaultVal')) {
          return this.defaultVal;
        } else {
          throw new Error("Environment: missing " + this.key + " (aliases: [" + (this.aliases.join(', ')) + "])");
        }
      }
    };

    EnvironmentProperty.normalName = function(key, appName) {
      var prefix;
      prefix = typeof appName === 'string' && appName.length > 0 ? appName.toUpperCase() + '_' : '';
      if (key.indexOf(prefix) === 0) {
        return key.substring(prefix.length);
      } else {
        return key;
      }
    };

    EnvironmentProperty.wrappedName = function(key, appName) {
      var prefix;
      prefix = typeof appName === 'string' && appName.length > 0 ? appName.toUpperCase() + '_' : '';
      if (key.indexOf(prefix) === 0) {
        return key;
      } else {
        return prefix + key;
      }
    };

    return EnvironmentProperty;

  })();

  module.exports = EnvironmentProperty;

}).call(this);
